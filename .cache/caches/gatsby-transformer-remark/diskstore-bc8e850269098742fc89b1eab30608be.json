{"expireTime":9007200807735730000,"key":"transformer-remark-markdown-html-6b5e2a9314bfaa8efafd52fb9a4a8610--","val":"<p>When <a href=\"https://tailwindcss.com\">Tailwind CSS</a> dropped I was eager to have a play as I loved the look of the syntax. The perfect opportunity arose while over the holidays when I thought my personal site could use a revamp.</p>\n<p>I used the fantastic <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a> (CRA) to start a new React project and skip lots of tedious and confusing boilerplate:</p>\n<pre><code class=\"language-bash\">create-react-app myproject\ncd myproject\n</code></pre>\n<p>CRA is set up for using vanilla CSS out of the box and although there is an <a href=\"https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-a-css-preprocessor-sass-less-etc\">official guide on using the Sass preprocessor</a>, I wanted to switch to use <a href=\"http://postcss.org\">PostCSS</a> as Tailwind exports directives for this.</p>\n<p>After some Googling, I found that most people wanting to use PostCSS with CRA were having to “eject” CRA in order to edit the underlying <a href=\"https://webpack.js.org\">Webpack</a> configuration, which deals with all the necessary loaders for different filetypes (such as CSS).</p>\n<p>Ejecting seemed a bit of a drastic measure given that I had only just started this project, so after a bit of trial and error bodging together different solutions, I got it working. Here’s how!</p>\n<p>Firstly, if you haven’t done already, you want to install the necessary Node modules in your project to achieve this:</p>\n<pre><code>npm install --save-dev tailwindcss autoprefixer postcss-cli\n</code></pre>\n<p><strong>N.B:</strong> you don’t <em>have</em> to install <code>autoprefixer</code> but we use it below and the Tailwind docs advise using it with PostCSS, so who am I to argue!</p>\n<p>Then initialise Tailwind with a new configuration file in the root of your project. I like to add the <code>.config</code> suffix to these files, so I know what they are for:</p>\n<pre><code>npx tailwind init tailwind.config.js\n</code></pre>\n<p>You’ll need to do the same for PostCSS so we can use it to transform the Tailwind directives into pure CSS — again, in the root of your project, create a file called <code>postcss.config.js</code> and add this code (taken straight from the <a href=\"https://tailwindcss.com/docs/installation#webpack\">Tailwind docs</a>):</p>\n<pre><code class=\"language-javascript\">const tailwindcss = require(\"tailwindcss\");\n\nmodule.exports = {\n  plugins: [tailwindcss(\"./tailwind.config.js\"), require(\"autoprefixer\")]\n};\n</code></pre>\n<p>Nearly there! Now we need to set up our CSS “entry point”. You can do this wherever you like but here’s how I do it (if you change these paths, you will need to change them in the <code>package.json</code> scripts further down this article). Create <code>src/styles/index.css</code> and paste in the following:</p>\n<pre><code class=\"language-css\">@tailwind preflight;\n@tailwind utilities;\n\n/* Your custom CSS here */\n</code></pre>\n<h2>Hooking it all together</h2>\n<p>Now all that is left is to edit the scripts in <code>package.json</code>  —  we still use the default CRA commands, but amend <code>start</code> and <code>build</code>, while adding <code>watch:css</code> and <code>build:css</code>:</p>\n<pre><code class=\"language-json\">{\n  \"scripts\": {\n    \"build:css\": \"postcss src/styles/index.css -o src/index.css\",\n    \"watch:css\": \"postcss src/styles/index.css -o src/index.css -w\",\n    \"start\": \"npm run watch:css &#x26; react-scripts start\",\n    \"build\": \"npm run build:css &#x26;&#x26; react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n</code></pre>\n<p>(Notice the single <code>&#x26;</code> on the <code>start</code> script  —  we’re telling bash to run the <code>npm run watch:css</code> command in the background, while our original <code>react-scripts start</code> runs as normal.)</p>\n<p>If you now run <code>npm run start</code> you should see <code>src/index.css</code> generated, containing the Tailwind CSS reset and utility classes, and your custom CSS below. Furthermore, if you edit the <code>src/styles/index.css</code> this should watch for changes and reload your app. Woo!</p>\n<p>To make use of this file, just make sure that in your src/index.js you have:</p>\n<pre><code class=\"language-javascript\">import \"index.css\";\n</code></pre>\n<p>And you are good to go.</p>\n<h2>Next steps</h2>\n<p>As detailed in the Tailwind docs, now we have PostCSS processing set up, we can take advantage of the many PostCSS plugins available!</p>"}